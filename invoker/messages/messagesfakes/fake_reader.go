// Code generated by counterfeiter. DO NOT EDIT.
package messagesfakes

import (
	"context"
	"sync"

	"github.com/ostenbom/refunction/invoker/messages"
	kafka "github.com/segmentio/kafka-go"
)

type FakeReader struct {
	ReadMessageStub        func(context.Context) (kafka.Message, error)
	readMessageMutex       sync.RWMutex
	readMessageArgsForCall []struct {
		arg1 context.Context
	}
	readMessageReturns struct {
		result1 kafka.Message
		result2 error
	}
	readMessageReturnsOnCall map[int]struct {
		result1 kafka.Message
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReader) ReadMessage(arg1 context.Context) (kafka.Message, error) {
	fake.readMessageMutex.Lock()
	ret, specificReturn := fake.readMessageReturnsOnCall[len(fake.readMessageArgsForCall)]
	fake.readMessageArgsForCall = append(fake.readMessageArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("ReadMessage", []interface{}{arg1})
	fake.readMessageMutex.Unlock()
	if fake.ReadMessageStub != nil {
		return fake.ReadMessageStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.readMessageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) ReadMessageCallCount() int {
	fake.readMessageMutex.RLock()
	defer fake.readMessageMutex.RUnlock()
	return len(fake.readMessageArgsForCall)
}

func (fake *FakeReader) ReadMessageCalls(stub func(context.Context) (kafka.Message, error)) {
	fake.readMessageMutex.Lock()
	defer fake.readMessageMutex.Unlock()
	fake.ReadMessageStub = stub
}

func (fake *FakeReader) ReadMessageArgsForCall(i int) context.Context {
	fake.readMessageMutex.RLock()
	defer fake.readMessageMutex.RUnlock()
	argsForCall := fake.readMessageArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReader) ReadMessageReturns(result1 kafka.Message, result2 error) {
	fake.readMessageMutex.Lock()
	defer fake.readMessageMutex.Unlock()
	fake.ReadMessageStub = nil
	fake.readMessageReturns = struct {
		result1 kafka.Message
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) ReadMessageReturnsOnCall(i int, result1 kafka.Message, result2 error) {
	fake.readMessageMutex.Lock()
	defer fake.readMessageMutex.Unlock()
	fake.ReadMessageStub = nil
	if fake.readMessageReturnsOnCall == nil {
		fake.readMessageReturnsOnCall = make(map[int]struct {
			result1 kafka.Message
			result2 error
		})
	}
	fake.readMessageReturnsOnCall[i] = struct {
		result1 kafka.Message
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readMessageMutex.RLock()
	defer fake.readMessageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ messages.Reader = new(FakeReader)
