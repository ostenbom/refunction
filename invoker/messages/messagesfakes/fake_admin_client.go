// Code generated by counterfeiter. DO NOT EDIT.
package messagesfakes

import (
	"context"
	"sync"

	"github.com/confluentinc/confluent-kafka-go/kafka"
	"github.com/ostenbom/refunction/invoker/messages"
)

type FakeAdminClient struct {
	CreateTopicsStub        func(context.Context, []kafka.TopicSpecification, ...kafka.CreateTopicsAdminOption) ([]kafka.TopicResult, error)
	createTopicsMutex       sync.RWMutex
	createTopicsArgsForCall []struct {
		arg1 context.Context
		arg2 []kafka.TopicSpecification
		arg3 []kafka.CreateTopicsAdminOption
	}
	createTopicsReturns struct {
		result1 []kafka.TopicResult
		result2 error
	}
	createTopicsReturnsOnCall map[int]struct {
		result1 []kafka.TopicResult
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAdminClient) CreateTopics(arg1 context.Context, arg2 []kafka.TopicSpecification, arg3 ...kafka.CreateTopicsAdminOption) ([]kafka.TopicResult, error) {
	var arg2Copy []kafka.TopicSpecification
	if arg2 != nil {
		arg2Copy = make([]kafka.TopicSpecification, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.createTopicsMutex.Lock()
	ret, specificReturn := fake.createTopicsReturnsOnCall[len(fake.createTopicsArgsForCall)]
	fake.createTopicsArgsForCall = append(fake.createTopicsArgsForCall, struct {
		arg1 context.Context
		arg2 []kafka.TopicSpecification
		arg3 []kafka.CreateTopicsAdminOption
	}{arg1, arg2Copy, arg3})
	fake.recordInvocation("CreateTopics", []interface{}{arg1, arg2Copy, arg3})
	fake.createTopicsMutex.Unlock()
	if fake.CreateTopicsStub != nil {
		return fake.CreateTopicsStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTopicsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAdminClient) CreateTopicsCallCount() int {
	fake.createTopicsMutex.RLock()
	defer fake.createTopicsMutex.RUnlock()
	return len(fake.createTopicsArgsForCall)
}

func (fake *FakeAdminClient) CreateTopicsCalls(stub func(context.Context, []kafka.TopicSpecification, ...kafka.CreateTopicsAdminOption) ([]kafka.TopicResult, error)) {
	fake.createTopicsMutex.Lock()
	defer fake.createTopicsMutex.Unlock()
	fake.CreateTopicsStub = stub
}

func (fake *FakeAdminClient) CreateTopicsArgsForCall(i int) (context.Context, []kafka.TopicSpecification, []kafka.CreateTopicsAdminOption) {
	fake.createTopicsMutex.RLock()
	defer fake.createTopicsMutex.RUnlock()
	argsForCall := fake.createTopicsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeAdminClient) CreateTopicsReturns(result1 []kafka.TopicResult, result2 error) {
	fake.createTopicsMutex.Lock()
	defer fake.createTopicsMutex.Unlock()
	fake.CreateTopicsStub = nil
	fake.createTopicsReturns = struct {
		result1 []kafka.TopicResult
		result2 error
	}{result1, result2}
}

func (fake *FakeAdminClient) CreateTopicsReturnsOnCall(i int, result1 []kafka.TopicResult, result2 error) {
	fake.createTopicsMutex.Lock()
	defer fake.createTopicsMutex.Unlock()
	fake.CreateTopicsStub = nil
	if fake.createTopicsReturnsOnCall == nil {
		fake.createTopicsReturnsOnCall = make(map[int]struct {
			result1 []kafka.TopicResult
			result2 error
		})
	}
	fake.createTopicsReturnsOnCall[i] = struct {
		result1 []kafka.TopicResult
		result2 error
	}{result1, result2}
}

func (fake *FakeAdminClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createTopicsMutex.RLock()
	defer fake.createTopicsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAdminClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ messages.AdminClient = new(FakeAdminClient)
