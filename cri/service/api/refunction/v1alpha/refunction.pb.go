// Code generated by protoc-gen-go. DO NOT EDIT.
// source: refunction.proto

/*
Package refunctionv1alpha is a generated protocol buffer package.

It is generated from these files:
	refunction.proto

It has these top-level messages:
	ListContainersRequest
	ListContainersResponse
	Request
	Response
	FunctionRequest
	FunctionResponse
	RestoreRequest
	RestoreResponse
*/
package refunctionv1alpha

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListContainersRequest struct {
}

func (m *ListContainersRequest) Reset()                    { *m = ListContainersRequest{} }
func (m *ListContainersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListContainersRequest) ProtoMessage()               {}
func (*ListContainersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ListContainersResponse struct {
	ContainerIds []string `protobuf:"bytes,1,rep,name=container_ids,json=containerIds" json:"container_ids,omitempty"`
}

func (m *ListContainersResponse) Reset()                    { *m = ListContainersResponse{} }
func (m *ListContainersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListContainersResponse) ProtoMessage()               {}
func (*ListContainersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListContainersResponse) GetContainerIds() []string {
	if m != nil {
		return m.ContainerIds
	}
	return nil
}

type Request struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	Request     string `protobuf:"bytes,2,opt,name=request" json:"request,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Request) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *Request) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

type Response struct {
	Response string `protobuf:"bytes,1,opt,name=response" json:"response,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Response) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

type FunctionRequest struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
	Function    string `protobuf:"bytes,2,opt,name=function" json:"function,omitempty"`
}

func (m *FunctionRequest) Reset()                    { *m = FunctionRequest{} }
func (m *FunctionRequest) String() string            { return proto.CompactTextString(m) }
func (*FunctionRequest) ProtoMessage()               {}
func (*FunctionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FunctionRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *FunctionRequest) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

type FunctionResponse struct {
}

func (m *FunctionResponse) Reset()                    { *m = FunctionResponse{} }
func (m *FunctionResponse) String() string            { return proto.CompactTextString(m) }
func (*FunctionResponse) ProtoMessage()               {}
func (*FunctionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type RestoreRequest struct {
}

func (m *RestoreRequest) Reset()                    { *m = RestoreRequest{} }
func (m *RestoreRequest) String() string            { return proto.CompactTextString(m) }
func (*RestoreRequest) ProtoMessage()               {}
func (*RestoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type RestoreResponse struct {
}

func (m *RestoreResponse) Reset()                    { *m = RestoreResponse{} }
func (m *RestoreResponse) String() string            { return proto.CompactTextString(m) }
func (*RestoreResponse) ProtoMessage()               {}
func (*RestoreResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*ListContainersRequest)(nil), "refunction.v1alpha.ListContainersRequest")
	proto.RegisterType((*ListContainersResponse)(nil), "refunction.v1alpha.ListContainersResponse")
	proto.RegisterType((*Request)(nil), "refunction.v1alpha.Request")
	proto.RegisterType((*Response)(nil), "refunction.v1alpha.Response")
	proto.RegisterType((*FunctionRequest)(nil), "refunction.v1alpha.FunctionRequest")
	proto.RegisterType((*FunctionResponse)(nil), "refunction.v1alpha.FunctionResponse")
	proto.RegisterType((*RestoreRequest)(nil), "refunction.v1alpha.RestoreRequest")
	proto.RegisterType((*RestoreResponse)(nil), "refunction.v1alpha.RestoreResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RefunctionService service

type RefunctionServiceClient interface {
	// ListControllers? ListSandboxes?
	ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error)
	SendRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SendFunction(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*FunctionResponse, error)
	Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error)
}

type refunctionServiceClient struct {
	cc *grpc.ClientConn
}

func NewRefunctionServiceClient(cc *grpc.ClientConn) RefunctionServiceClient {
	return &refunctionServiceClient{cc}
}

func (c *refunctionServiceClient) ListContainers(ctx context.Context, in *ListContainersRequest, opts ...grpc.CallOption) (*ListContainersResponse, error) {
	out := new(ListContainersResponse)
	err := grpc.Invoke(ctx, "/refunction.v1alpha.RefunctionService/ListContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refunctionServiceClient) SendRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/refunction.v1alpha.RefunctionService/SendRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refunctionServiceClient) SendFunction(ctx context.Context, in *FunctionRequest, opts ...grpc.CallOption) (*FunctionResponse, error) {
	out := new(FunctionResponse)
	err := grpc.Invoke(ctx, "/refunction.v1alpha.RefunctionService/SendFunction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refunctionServiceClient) Restore(ctx context.Context, in *RestoreRequest, opts ...grpc.CallOption) (*RestoreResponse, error) {
	out := new(RestoreResponse)
	err := grpc.Invoke(ctx, "/refunction.v1alpha.RefunctionService/Restore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RefunctionService service

type RefunctionServiceServer interface {
	// ListControllers? ListSandboxes?
	ListContainers(context.Context, *ListContainersRequest) (*ListContainersResponse, error)
	SendRequest(context.Context, *Request) (*Response, error)
	SendFunction(context.Context, *FunctionRequest) (*FunctionResponse, error)
	Restore(context.Context, *RestoreRequest) (*RestoreResponse, error)
}

func RegisterRefunctionServiceServer(s *grpc.Server, srv RefunctionServiceServer) {
	s.RegisterService(&_RefunctionService_serviceDesc, srv)
}

func _RefunctionService_ListContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefunctionServiceServer).ListContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/refunction.v1alpha.RefunctionService/ListContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefunctionServiceServer).ListContainers(ctx, req.(*ListContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefunctionService_SendRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefunctionServiceServer).SendRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/refunction.v1alpha.RefunctionService/SendRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefunctionServiceServer).SendRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefunctionService_SendFunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefunctionServiceServer).SendFunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/refunction.v1alpha.RefunctionService/SendFunction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefunctionServiceServer).SendFunction(ctx, req.(*FunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefunctionService_Restore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefunctionServiceServer).Restore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/refunction.v1alpha.RefunctionService/Restore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefunctionServiceServer).Restore(ctx, req.(*RestoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RefunctionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "refunction.v1alpha.RefunctionService",
	HandlerType: (*RefunctionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListContainers",
			Handler:    _RefunctionService_ListContainers_Handler,
		},
		{
			MethodName: "SendRequest",
			Handler:    _RefunctionService_SendRequest_Handler,
		},
		{
			MethodName: "SendFunction",
			Handler:    _RefunctionService_SendFunction_Handler,
		},
		{
			MethodName: "Restore",
			Handler:    _RefunctionService_Restore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "refunction.proto",
}

func init() { proto.RegisterFile("refunction.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0x87, 0xed, 0x04, 0xd7, 0xbd, 0xd5, 0xad, 0x8d, 0xa8, 0xa5, 0x7a, 0x98, 0xa9, 0xc8, 0xf4,
	0x50, 0x50, 0xcf, 0x5e, 0x14, 0x06, 0x8a, 0x07, 0xe9, 0x3c, 0xe9, 0x41, 0x6a, 0x1b, 0x31, 0x20,
	0x49, 0x4d, 0xb2, 0xfd, 0xf7, 0x82, 0xac, 0x4b, 0xb2, 0x3a, 0xeb, 0x70, 0xb7, 0xbd, 0xf7, 0xbe,
	0xfd, 0x5e, 0xfa, 0xa5, 0x05, 0x5f, 0x90, 0xb7, 0x09, 0xcb, 0x15, 0xe5, 0x2c, 0x29, 0x05, 0x57,
	0x1c, 0xa1, 0x5a, 0x67, 0x7a, 0x9e, 0x7d, 0x94, 0xef, 0x19, 0xde, 0x87, 0xdd, 0x7b, 0x2a, 0xd5,
	0x0d, 0x67, 0x2a, 0xa3, 0x8c, 0x08, 0x99, 0x92, 0xcf, 0x09, 0x91, 0x0a, 0x5f, 0xc1, 0xde, 0xf2,
	0x40, 0x96, 0x9c, 0x49, 0x82, 0x62, 0xd8, 0xce, 0x4d, 0xf7, 0x85, 0x16, 0x32, 0x74, 0x06, 0x9b,
	0xc3, 0x4e, 0xea, 0xd9, 0xe6, 0x6d, 0x21, 0xf1, 0x08, 0xda, 0x3a, 0x09, 0x1d, 0x81, 0x57, 0xe7,
	0x43, 0x67, 0xe0, 0x0c, 0x3b, 0x69, 0xb7, 0x86, 0xa3, 0x10, 0xda, 0x62, 0x4e, 0x87, 0xad, 0x6a,
	0x6a, 0x4a, 0x7c, 0x02, 0xae, 0x5d, 0x1c, 0x81, 0x2b, 0xf4, 0x6f, 0x1d, 0x62, 0x6b, 0xfc, 0x00,
	0xfd, 0x91, 0x7e, 0xb6, 0x35, 0xf6, 0x46, 0xe0, 0x1a, 0x23, 0x7a, 0xb1, 0xad, 0x31, 0x02, 0x7f,
	0x91, 0xa8, 0xb7, 0xf8, 0xd0, 0x4b, 0x89, 0x54, 0x5c, 0x10, 0xa3, 0x29, 0x80, 0xbe, 0xed, 0xcc,
	0xa1, 0x8b, 0xaf, 0x16, 0x04, 0xa9, 0x35, 0x3d, 0x26, 0x62, 0x4a, 0x73, 0x82, 0x28, 0xf4, 0x7e,
	0xfa, 0x44, 0xa7, 0xc9, 0xef, 0xfb, 0x48, 0x1a, 0x2f, 0x23, 0x3a, 0xfb, 0x0f, 0xaa, 0xcf, 0xb8,
	0x81, 0xee, 0xa0, 0x3b, 0x26, 0xac, 0x30, 0x1e, 0x0e, 0x9a, 0xfe, 0x6c, 0x92, 0x0f, 0x9b, 0x87,
	0x36, 0xeb, 0x19, 0xbc, 0x59, 0x96, 0x31, 0x81, 0xe2, 0x26, 0x7e, 0xc9, 0x7c, 0x74, 0xbc, 0x1a,
	0xb2, 0xe1, 0x8f, 0xb3, 0x97, 0xa4, 0x92, 0x87, 0xf0, 0x1f, 0xe7, 0xa8, 0xb9, 0x8e, 0xe2, 0x95,
	0x8c, 0x49, 0xbd, 0xde, 0x79, 0x0a, 0x16, 0x9c, 0xc6, 0x5e, 0xb7, 0xaa, 0x4f, 0xe0, 0xf2, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0x0a, 0xc1, 0x3e, 0x1b, 0x16, 0x03, 0x00, 0x00,
}
